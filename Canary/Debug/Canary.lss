
Canary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000255  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1e c0       	rjmp	.+60     	; 0x40 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__vector_2>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__bad_interrupt>
   8:	1b c0       	rjmp	.+54     	; 0x40 <__bad_interrupt>
   a:	1a c0       	rjmp	.+52     	; 0x40 <__bad_interrupt>
   c:	19 c0       	rjmp	.+50     	; 0x40 <__bad_interrupt>
   e:	18 c0       	rjmp	.+48     	; 0x40 <__bad_interrupt>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__bad_interrupt>
  12:	16 c0       	rjmp	.+44     	; 0x40 <__bad_interrupt>
  14:	15 c0       	rjmp	.+42     	; 0x40 <__bad_interrupt>
  16:	14 c0       	rjmp	.+40     	; 0x40 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__vector_12>
  1a:	12 c0       	rjmp	.+36     	; 0x40 <__bad_interrupt>
  1c:	11 c0       	rjmp	.+34     	; 0x40 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	ea ee       	ldi	r30, 0xEA	; 234
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	02 c0       	rjmp	.+4      	; 0x36 <__do_copy_data+0x10>
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	a2 36       	cpi	r26, 0x62	; 98
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <__do_copy_data+0xc>
  3c:	2d d0       	rcall	.+90     	; 0x98 <main>
  3e:	53 c0       	rjmp	.+166    	; 0xe6 <_exit>

00000040 <__bad_interrupt>:
  40:	df cf       	rjmp	.-66     	; 0x0 <__vectors>

00000042 <__vector_2>:
		+ (0 << WDCE)		//watchdog change enable
		+ (1 << WDE)		//watchdog enable
		+ (1 << WDP3)		//
		+ (0 << WDP2)		//watchdog timer prescale - WDP3:WDP0
		+ (0 << WDP1)		// 0000=16ms, 0001=32ms, 0010=64ms, 0011=0.125s, 0100=0.25s, 
		+ (1 << WDP0);		// 0101=0.5s, 0110=1s, 0111=2s, 1000=4s, 1001=8s
  42:	1f 92       	push	r1
  44:	0f 92       	push	r0
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	0f 92       	push	r0
  4a:	11 24       	eor	r1, r1
  4c:	8f 93       	push	r24
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  54:	8f 91       	pop	r24
  56:	0f 90       	pop	r0
  58:	0f be       	out	0x3f, r0	; 63
  5a:	0f 90       	pop	r0
  5c:	1f 90       	pop	r1
  5e:	18 95       	reti

00000060 <__vector_12>:
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	0f 90       	pop	r0
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	0f 90       	pop	r0
  70:	1f 90       	pop	r1
  72:	18 95       	reti

00000074 <_Z8delay_msm>:
  74:	61 15       	cp	r22, r1
  76:	71 05       	cpc	r23, r1
  78:	81 05       	cpc	r24, r1
  7a:	91 05       	cpc	r25, r1
  7c:	61 f0       	breq	.+24     	; 0x96 <_Z8delay_msm+0x22>
  7e:	dc 01       	movw	r26, r24
  80:	cb 01       	movw	r24, r22
  82:	e9 ef       	ldi	r30, 0xF9	; 249
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <_Z8delay_msm+0x12>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_Z8delay_msm+0x18>
  8c:	00 00       	nop
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	a1 09       	sbc	r26, r1
  92:	b1 09       	sbc	r27, r1
  94:	b1 f7       	brne	.-20     	; 0x82 <_Z8delay_msm+0xe>
  96:	08 95       	ret

00000098 <main>:
}


int main(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	dd 27       	eor	r29, r29
	//					1-8 minutes, time is (1 + DIP setting) in minutes
	//					switch #1 is MSB
	// PB1 input	DIP switch #2
	// PB0 input	DIP switch #1
	
	DDRB =  0b00001000;		// set all ports as input except for PB3
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00101111;		// turn ports on for all inputs except PB4 (enabling pull-ups)
  a6:	8f e2       	ldi	r24, 0x2F	; 47
  a8:	88 bb       	out	0x18, r24	; 24
		+ (0 << WDCE)		//watchdog change enable
		+ (1 << WDE)		//watchdog enable
		+ (1 << WDP3)		//
		+ (0 << WDP2)		//watchdog timer prescale - WDP3:WDP0
		+ (0 << WDP1)		// 0000=16ms, 0001=32ms, 0010=64ms, 0011=0.125s, 0100=0.25s, 
		+ (1 << WDP0);		// 0101=0.5s, 0110=1s, 0111=2s, 1000=4s, 1001=8s
  aa:	89 ee       	ldi	r24, 0xE9	; 233
  ac:	81 bd       	out	0x21, r24	; 33
	
	setup_wdt();

	// we don't want to interrupt on a pin change, only check the PCIF when we
	// come out of sleep from a watchdog timeout
	setbit(GIMSK, PCIE);	// enable pin change interrupts
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8b bf       	out	0x3b, r24	; 59
	setbit(PCMSK, PCINT4);	// setup to interrupt on pin change of PB4
  b4:	ac 9a       	sbi	0x15, 4	; 21
	sei();					// enable interrupts
  b6:	78 94       	sei
	

    while (1) 
    {
		delay_ms(200);
  b8:	68 ec       	ldi	r22, 0xC8	; 200
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	d9 df       	rcall	.-78     	; 0x74 <_Z8delay_msm>
		
		//if(PINB & (1 << PB4)) {
		if (hd_led_changed) {
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  c6:	88 23       	and	r24, r24
  c8:	b9 f3       	breq	.-18     	; 0xb8 <main+0x20>
			hd_led_changed = false;
  ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			unsigned char volatile rst_pin = readbit(PORTB,PB3);
  ce:	88 b3       	in	r24, 0x18	; 24

#define clrbit(reg,bit)	((reg) &= ~(1 << (bit)))
#define setbit(reg,bit)	((reg) |=  (1 << (bit)))

unsigned char readbit(unsigned char reg, unsigned char bit) {
	reg = (reg & (1 << (bit))) >> bit;
  d0:	83 fb       	bst	r24, 3
  d2:	88 27       	eor	r24, r24
  d4:	80 f9       	bld	r24, 0
  d6:	89 83       	std	Y+1, r24	; 0x01

			if (rst_pin) {
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 23       	and	r24, r24
  dc:	11 f0       	breq	.+4      	; 0xe2 <__stack+0x3>
				mobo_reset_on();
  de:	c3 98       	cbi	0x18, 3	; 24
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x20>
			} else {
				mobo_reset_off();
  e2:	c3 9a       	sbi	0x18, 3	; 24
  e4:	e9 cf       	rjmp	.-46     	; 0xb8 <main+0x20>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
